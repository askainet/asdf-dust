#!/usr/bin/env bash

set -e
set -o pipefail

# https://github.com/bootandy/dust/releases/download/v1.2.1/dust-v1.2.1-aarch64-unknown-linux-musl.tar.gz
# https://github.com/bootandy/dust/releases/download/v1.2.1/dust-v1.2.1-arm-unknown-linux-musleabi.tar.gz
# https://github.com/bootandy/dust/releases/download/v1.2.1/dust-v1.2.1-i686-unknown-linux-musl.tar.gz
# https://github.com/bootandy/dust/releases/download/v1.2.1/dust-v1.2.1-x86_64-apple-darwin.tar.gz
# https://github.com/bootandy/dust/releases/download/v1.2.1/dust-v1.2.1-x86_64-unknown-linux-musl.tar.gz

readonly github_coordinates=bootandy/dust
readonly toolname=dust
readonly filename_template=__BINARY_NAME__-v__VERSION__-__ARCH__-__PLATFORM__.tar.gz
readonly download_url_template=https://github.com/__GITHUB_COORDINATES__/releases/download/v__VERSION__/__FILENAME__
readonly binary_path_in_archive_template=__ARCHIVE_DIR__/__BINARY_NAME__-v__VERSION__-__ARCH__-__PLATFORM__/__BINARY_NAME__

# Borrowed to someone, but I don't remember who it was, sorry :(
# Print message $2 with log-level $1 to STDERR, colorized if terminal
# log DEBUG "DOCKER_HOST ${DOCKER_HOST}"
function log() {
  local level=${1?}
  shift
  local code
  local line
  code=''
  line="[$(date '+%F %T')] $level: $*"
  if [ -t 2 ]; then
    case "$level" in
    INFO) code=36 ;;
    DEBUG) code=35 ;;
    WARN) code=33 ;;
    ERROR) code=31 ;;
    *) code=37 ;;
    esac
    echo -e "\e[${code}m${line} \e[94m(${FUNCNAME[1]})\e[0m"
  else
    echo "$line"
  fi >&2
}

install_tool() {
  #local install_type=$1
  local version=$2
  local install_path=$3
  local tmp_download_dir=$4
  local binary_name=$5

  local arch
  local platform
  local bin_install_path="$install_path/bin"
  local binary_path="$bin_install_path/${binary_name}"
  local download_url
  local download_path

  arch=$(get_arch)
	platform=$(get_platform)
  download_url=$(get_download_url "$version" "$arch" "$platform" "$binary_name")
  download_path="$tmp_download_dir/"$(get_filename "$version" "$arch" "$platform" "$binary_name")

  log INFO "Downloading [${binary_name}] from ${download_url} to ${download_path}"
  curl -Lo "$download_path" "$download_url"

  log INFO "Creating bin directory"
  mkdir -p "${bin_install_path}"

  log INFO "Cleaning previous binaries"
  rm -f "$binary_path" 2>/dev/null || true

  log INFO "Extracting archive"
  tar xpf "$download_path" -C "$tmp_download_dir"

  log INFO "Copying binary"
  cp "$(get_binary_path_in_archive "${tmp_download_dir}" "${binary_name}" "${version}" "${arch}" "${platform}")" "${binary_path}"
  chmod +x "${binary_path}"
}

get_binary_path_in_archive() {
  local archive_dir=$1
  local binary_name=$2
  local version=$3
  local arch=$4
  local platform=$5

  echo $binary_path_in_archive_template |
    sed "s|__ARCHIVE_DIR__|${archive_dir}|g;s|__BINARY_NAME__|${binary_name}|g;s|__VERSION__|${version}|g;s/__ARCH__/${arch}/g;s|__PLATFORM__|${platform}|g;"

}

get_arch() {
  arch=$(uname -m | tr '[:upper:]' '[:lower:]')
  case $arch in
  arm64)
    arch='aarch64'
    ;;
  esac

  echo "$arch"
}

get_platform() {
  plat=$(uname | tr '[:upper:]' '[:lower:]')

  case $plat in
  darwin)
    plat='apple-darwin'
    ;;
  linux)
    plat='unknown-linux-musl'
    ;;
  esac

  echo "$plat"
}

get_filename() {
  local version="$1"
  local arch="$2"
  local platform="$3"
  local binary_name="$4"
  local version_short
  version_short=$(echo "$version" | tr -d "v")
  #  log DEBUG "version=${version}, version_short=${version_short}, binary_name=${binary_name}, arch=${arch}, platform=${platform}"

  echo "$filename_template" |
    sed "s/__VERSION__/${version}/g;s/__VERSION_SHORT__/${version_short}/g;s/__BINARY_NAME__/${binary_name}/g;s/__ARCH__/${arch}/g;s/__PLATFORM__/${platform}/g"
}

get_download_url() {
  local version="$1"
  local arch="$2"
  local platform="$3"
  local binary_name="$4"

  local filename
  filename="$(get_filename "$version" "$arch" "$platform" "$binary_name")"
  #  log DEBUG "version=${version}, binary_name=${binary_name}, arch=${arch}, platform=${platform}, filename=${filename}"

  echo "$download_url_template" |
    sed "s|__GITHUB_COORDINATES__|${github_coordinates}|g;s|__VERSION__|${version}|g;s|__FILENAME__|${filename}|g;"
}

readonly _tmp_download_dir="$(mktemp -d -t 'asdf_XXXXXXXX')"
trap 'rm -rf "${_tmp_download_dir}"' EXIT
install_tool "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH" "$_tmp_download_dir" "$toolname"
